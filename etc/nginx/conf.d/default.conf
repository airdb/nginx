server {
    listen                 0.0.0.0:443 ssl;
    http2 on;
    ssl_certificate_key    "data:-----BEGIN EC PARAMETERS-----\nBggqhkjOPQMBBw==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIL02pwZutbzkmdIM0QpvD7W3pcL2dGaeWrbQ8pNCHPFeoAoGCCqGSM49\nAwEHoUQDQgAE0Jektzpg3tJx3iPU05WwG4GweCwGWv87kkZQGB+6vG/kQQeOhnZ7\n7TCroQgY4ZVnBRZTD0lvxSyR6rwt3lWQ4A==\n-----END EC PRIVATE KEY-----\n";

    ssl_certificate        "data:-----BEGIN CERTIFICATE-----\nMIIBtjCCAV2gAwIBAgIUN/O0uv7B+18ohuf05ygsoC82liswCgYIKoZIzj0EAwIw\nMTELMAkGA1UEBhMCVVMxDDAKBgNVBAsMA1dlYjEUMBIGA1UEAwwLZXhhbXBsZS5v\ncmcwHhcNMjIwNzI4MTgzMzA2WhcNMjMwNzI5MTgzMzA2WjAxMQswCQYDVQQGEwJV\nUzEMMAoGA1UECwwDV2ViMRQwEgYDVQQDDAtleGFtcGxlLm9yZzBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABNCXpLc6YN7Scd4j1NOVsBuBsHgsBlr/O5JGUBgfurxv\n5EEHjoZ2e+0wq6EIGOGVZwUWUw9Jb8Uskeq8Ld5VkOCjUzBRMB0GA1UdDgQWBBSH\n9cc3JRcpyPh3nEa41Ux6RDGjLTAfBgNVHSMEGDAWgBSH9cc3JRcpyPh3nEa41Ux6\nRDGjLTAPBgNVHRMBAf8EBTADAQH/MAoGCCqGSM49BAMCA0cAMEQCIChRR5U7MMYQ\ntMK0zhNnt2SqRy30VcPIm9qoEms5cNxdAiBb273P7vSkj/PmDd1WsFVkg9NymBaT\n0nsIem2LKav60g==\n-----END CERTIFICATE-----\n";

    access_log             /dev/stdout;
    default_type           "application/json";
    resolver 8.8.8.8 valid=10s;

    location / {
	content_by_lua_file resty/fingerprint.lua;
    	#return                 200 '{\n  "ua": "$http_user_agent",\n  "ja3": "$http_ssl_ja3",\n  "ja3_hash": "$http_ssl_ja3_hash",\n  "greased": $http_ssl_greased\n}';
    }

    location /nofp {
	#access_by_lua_file "resty/access_by_redis.lua";
	#access_by_lua_file "resty/access_forwarding.lua";
    	return 200 ok;
    }

     location /lua {
         # MIME type determined by default_type:
         default_type 'text/plain';

         #content_by_lua_file resty/fingerprint.lua;
         #access_by_lua_file /etc/lua/resty/access_forwarding.lua;
         #content_by_lua_file /etc/lua/resty/access_forwarding.lua;
     }

     location /redis {
         content_by_lua_file resty/hello.lua;
     }

     location /lua_content {
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua_block {
             ngx.say('Hello,world!')
         }
     }

 	location /sock {
 	    content_by_lua_block {
 	        local sock = ngx.socket.tcp()
 	        -- assume "192.168.1.10" is the local ip address
 	        -- local ok, err = sock:bind("192.168.1.10")
 	        -- if not ok then
 	        --     ngx.say("failed to bind")
 	        --     return
 	        -- end
 	        -- local ok, err = sock:connect("sg.airdb.host", 3000)
 	        local ok, err = sock:connect("129.226.148.218", 3000)
 	        if not ok then
 	            ngx.say("failed to connect server: ", err)
 	            return
 	        end
 	        ngx.say("successfully connected!")
 	        sock:close()
 	    }
 	}

     # --with-http_sub_module
	location /sub_filter {
	    sub_filter '<a href="http://127.0.0.1:8080/'  '<a href="https://$host/';
	    sub_filter 'nginx.com' 'baidu.com';
	    # 是否仅替换一次，如果为off，则全局替换
	    sub_filter_once on;
	    # 替换的响应类型，*表示替换所有类型
	    #sub_filter_types text/html;
	    # 是否保留原始的Last-Modified。默认是on
	    sub_filter_last_modified on;
	}

    location = /dns {
        content_by_lua_file /etc/lua/resty/dns.lua;
    }

    location = /new {
	            return                 200 '{\n  "ua": "$http_user_agent",\n  "ja3": "$http_ssl_ja3",\n  "h2fp": "$http2_fingerprint",\n  "greased": $http_ssl_greased\n}';
    }
}
